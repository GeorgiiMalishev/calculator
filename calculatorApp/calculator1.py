import math
from typing import Dict, Any
from calculatorApp.formula import Formula


class Calculator1:
    """
        Класс для выполнения вычислений на основе заданных входных данных и формул.

        Атрибуты:
            input_data (dict): Входные данные для расчётов.
            formulas (dict): Словарь, содержащий все формулы, которые будут вычислены.
            data (dict): Объединённые данные, включающие как константные, так и входные данные.
        """
    def __init__(self, input_data):
        """
                Конструктор класса.

                Инициализирует калькулятор с входными данными и задаёт набор постоянных данных.

                Параметры:
                    input_data (dict): Входные данные для калькулятора.
                """

        self.input_data = input_data
        const_data = {
            'Кол-во часов работы 180 часов': 11,
            'Кол-во часов работы 168 часов': 8,
            'Кол-во часов работы 79 часов': 4,
            'Кол-во часов работы 180 часов пр/вых/ночь': 11,
            'Среднее кол-во дней 180 часов': 20.6,
            'Среднее кол-во дней 168 часов': 20.6,
            'Среднее кол-во дней 79 часов': 20.6,
            'Среднее кол-во дней 180 часов пр/вых/ночь': 20.6,
            'Максимальное кол-во файлов в день 180 часов': 58,
            'Максимальное кол-во файлов в день 168 часов': 43,
            'Максимальное кол-во файлов в день 79 часов': 21,
            'Максимальное кол-во файлов в день 180 часов пр/вых/ночь': 78,
            'Максимальное кол-во файлов в месяц 180 часов': 1202,
            'Максимальное кол-во файлов в месяц 168 часов': 875,
            'Максимальное кол-во файлов в месяц 79 часов': 438,
            'Максимальное кол-во файлов в месяц 180 часов пр/вых/ночь': 1602,
            'Время обработки (мин) день': 8,
            'Время обработки (мин) ночь': 6,
            'Кол-во мин в часе': 50,
        }

        # Создаём формулы: ключ - наименование результата, значение - формула
        self.formulas = {
            'Общее факт среднее кол-во файлов в месяц': Formula(
                lambda a, b, c: round(a + b + c),
                ['Факт кол-во машин 180 часов', 'День факт среднее кол-во файлов в месяц',
                 'День/пр/вых факт среднее кол-во файлов в месяц']
            ),
            'Факт максимальное кол-во файлов 180 часов праздники/вых': Formula(
                lambda x, y: round(x * y),
                ['Факт кол-во машин 180 часов', 'Максимальное кол-во файлов в месяц 180 часов пр/вых/ночь']
            ),
            'Ночь/пр/вых факт нагрузка в %': Formula(
                lambda G8, I7: 0 if I7 == 0 else round(G8 / I7 * 100),
                ['Ночь/пр/вых факт среднее кол-во файлов в месяц',
                 'Факт максимальное кол-во файлов 180 часов праздники/вых']
            ),
            'Ночь/пр/вых факт нехватка машин': Formula(
                lambda K8, I7, F7: 0 if K8 < 86 else math.ceil((I7 * (K8 - 86)) / 86 / F7),
                ['Ночь/пр/вых факт нагрузка в %', 'Факт максимальное кол-во файлов 180 часов праздники/вых',
                 'Максимальное кол-во файлов в месяц 180 часов пр/вых/ночь']
            ),
            'Факт кол-во машин 180 часов': Formula(
                lambda a, b: round(a + b),
                ['Факт кол-во машин 180 часов', 'Ночь/пр/вых факт нехватка машин']
            ),
            'Факт максимальное кол-во файлов 180 часов': Formula(
                lambda x, y: round(x * y),
                ['Факт кол-во машин 180 часов', 'Максимальное кол-во файлов в месяц 180 часов']
            ),
            'Факт максимальное кол-во файлов 168 часов': Formula(
                lambda x, y: round(x * y),
                ['Факт кол-во машин 168 часов', 'Максимальное кол-во файлов в месяц 168 часов']
            ),
            'Факт максимальное кол-во файлов 79 часов': Formula(
                lambda x, y: round(x * y),
                ['Факт кол-во машин 79 часов', 'Максимальное кол-во файлов в месяц 79 часов']
            ),
            'Общая сумма факт максимальное кол-во файлов': Formula(
                lambda a, b, c: round(a + b + c),
                ['Факт максимальное кол-во файлов 180 часов', 'Факт максимальное кол-во файлов 168 часов',
                 'Факт максимальное кол-во файлов 79 часов']
            ),
            'День факт разница нагрузки': Formula(
                lambda total, day_avg: round(total - day_avg),
                ['Общая сумма факт максимальное кол-во файлов', 'День факт среднее кол-во файлов в месяц']
            ),
            'День/пр/вых факт разница нагрузки': Formula(
                lambda max_prazdn, day_night_avg: round(max_prazdn - day_night_avg),
                ['Факт максимальное кол-во файлов 180 часов праздники/вых',
                 'День/пр/вых факт среднее кол-во файлов в месяц']
            ),
            'Ночь/пр/вых факт разница нагрузки': Formula(
                lambda max_night, night_avg: round(max_night - night_avg),
                ['Факт максимальное кол-во файлов 180 часов праздники/вых', 'Ночь/пр/вых факт среднее кол-во файлов в месяц']
            ),
            'День факт нагрузка в %': Formula(
                lambda day_avg, total: round((day_avg / total) * 100) if total != 0 else 0,
                ['День факт среднее кол-во файлов в месяц', 'Общая сумма факт максимальное кол-во файлов']
            ),
            'День/пр/вых факт нагрузка в %': Formula(
                lambda day_max, day_avg: round((day_avg / day_max) * 100) if day_avg != 0 else 0,
                ['Факт максимальное кол-во файлов 180 часов праздники/вых',
                 'День/пр/вых факт среднее кол-во файлов в месяц']
            ),
            'Факт нехватка машин 180 часов': Formula(
                lambda x: round(x),
                ['Ночь/пр/вых факт нехватка машин']
            ),
            'Факт нехватка машин 168 часов': Formula(
                lambda K4, sum, F5: 0 if K4 < 86 else round(sum * (K4 - 86) / 86 / F5),
                ['День факт нагрузка в %', 'Общая сумма факт максимальное кол-во файлов',
                 'Максимальное кол-во файлов в месяц 168 часов']
            ),
            'Факт нехватка машин 79 часов': Formula(
                lambda G4, sum, L5, F5, F6: 0 if (G4 / (sum + L5 * F5)) < 86 else math.ceil(
                    ((G4 / (sum + L5 * F5)) - 86) * (sum + L5 * F5) / 86 / F6),
                ['День факт среднее кол-во файлов в месяц', 'Общая сумма факт максимальное кол-во файлов',
                 'Факт нехватка машин 168 часов', 'Максимальное кол-во файлов в месяц 168 часов',
                 'Максимальное кол-во файлов в месяц 79 часов']
            ),
            'Ср колво файлов новых УЗ в месяц день/пр/вых': Formula(
                lambda N4: round(N4 * 1.3 * 0.15),
                ['Общее кол-во новых пользователей (УЗ)']
            ),
            'Ср колво файлов новых УЗ в месяц ночь/пр/вых': Formula(
                lambda N4: round(N4 * 1.3 * 0.27),
                ['Общее кол-во новых пользователей (УЗ)']
            ),
            'Ср колво файлов новых УЗ в месяц день': Formula(
                lambda N4, O8, O7: round(N4 * 1.3 - O8 - O7),
                ['Общее кол-во новых пользователей (УЗ)', 'Ср колво файлов новых УЗ в месяц день/пр/вых',
                 'Ср колво файлов новых УЗ в месяц ночь/пр/вых']
            ),
            'Ср колво файлов с учетом новых УЗ в месяц день': Formula(
                lambda a, b: round(a + b),
                ['День факт среднее кол-во файлов в месяц', 'Ср колво файлов новых УЗ в месяц день']
            ),
            'Ср колво файлов с учетом новых УЗ в месяц день/пр/вых': Formula(
                lambda a, b: round(a + b),
                ['День/пр/вых факт среднее кол-во файлов в месяц', 'Ср колво файлов новых УЗ в месяц день/пр/вых']
            ),
            'Ср колво файлов с учетом новых УЗ в месяц ночь/пр/вых': Formula(
                lambda a, b: round(a + b),
                ['Ночь/пр/вых факт среднее кол-во файлов в месяц', 'Ср колво файлов новых УЗ в месяц ночь/пр/вых']
            ),
            'План нагрузка в % ночь/пр/вых': Formula(
                lambda a, b: round(b / a * 100),
                ['Факт максимальное кол-во файлов 180 часов праздники/вых',
                 'Ср колво файлов с учетом новых УЗ в месяц ночь/пр/вых']
            ),
            'Планируемая нехватка машин пр/вых': Formula(
                lambda T8, R7, F7: 0 if T8 < 86 else math.ceil((R7 * (T8 - 86)) / 86 / F7),
                ['План нагрузка в % ночь/пр/вых', 'Факт максимальное кол-во файлов 180 часов праздники/вых',
                 'Максимальное кол-во файлов в месяц 180 часов пр/вых/ночь']
            ),
            '(план)Факт кол-во машин 180 часов': Formula(
                lambda a, b, c: round(a - b + c),
                ['Факт кол-во машин 180 часов', 'Ночь/пр/вых факт нехватка машин', 'Планируемая нехватка машин пр/вых']
            ),
            '(план)Факт максимальное кол-во файлов 180 часов': Formula(
                lambda x, y: round(x * y),
                ['(план)Факт кол-во машин 180 часов', 'Максимальное кол-во файлов в месяц 180 часов']
            ),
            'сумм R4:R6': Formula(
                lambda a, b, c: round(a + b + c),
                ['(план)Факт максимальное кол-во файлов 180 часов', 'Факт максимальное кол-во файлов 168 часов',
                 'Факт максимальное кол-во файлов 79 часов']
            ),
            'Планируемая разница нагрузки день': Formula(
                lambda a, b: round(a - b),
                ['сумм R4:R6', 'Ср колво файлов с учетом новых УЗ в месяц день']
            ),
            'Планируемая разница нагрузки день/пр/вых': Formula(
                lambda a, b: round(a - b),
                ['Факт максимальное кол-во файлов 180 часов праздники/вых',
                 'Ср колво файлов с учетом новых УЗ в месяц день/пр/вых']
            ),
            'Планируемая разница нагрузки ночь/пр/вых': Formula(
                lambda a, b: round(a - b),
                ['Факт максимальное кол-во файлов 180 часов праздники/вых',
                 'Ср колво файлов с учетом новых УЗ в месяц ночь/пр/вых']
            ),
            'Планируемая нагрузка в % день': Formula(
                lambda a, b: round(a / b * 100),
                ['Ср колво файлов с учетом новых УЗ в месяц день', 'сумм R4:R6']
            ),
            'Планируемая нагрузка в % день/пр/вых': Formula(
                lambda a, b: round(a / b * 100),
                ['Ср колво файлов с учетом новых УЗ в месяц день/пр/вых',
                 'Факт максимальное кол-во файлов 180 часов праздники/вых']
            ),
            'Планируемая нагрузка в % ночь/пр/вых': Formula(
                lambda a, b: round(a / b * 100),
                ['Ср колво файлов с учетом новых УЗ в месяц ночь/пр/вых',
                 'Факт максимальное кол-во файлов 180 часов праздники/вых']
            ),
            'Планируемая нехватка машин 180 часов': Formula(
                lambda a: round(a),
                ['Планируемая нехватка машин пр/вых']
            ),
            'Планируемая нехватка машин 168 часов': Formula(
                lambda T4, sum, F5: 0 if T4 <= 86 else int(round(sum * (T4 - 86) / 86 / F5, 0)),
                ['Планируемая нагрузка в % день', 'сумм R4:R6', 'Максимальное кол-во файлов в месяц 168 часов']
            ),
            'Планируемая нехватка машин 79 часов': Formula(
                lambda O4, sum, U5, F5, F6: 0 if (O4 / (sum + U5 * F5)) <= 86 else math.ceil(
                    ((O4 / (sum + U5 * F5)) - 86) * (sum + U5 * F5) / 86 / F6),
                ['Ср колво файлов новых УЗ в месяц день', 'сумм R4:R6', 'Планируемая нехватка машин 168 часов',
                 'Максимальное кол-во файлов в месяц 168 часов', 'Максимальное кол-во файлов в месяц 79 часов']
            ),
        }

        # Объединяем данные
        self.data = {**const_data, **input_data}

    def calculate(self) -> Dict[str, Any]:
        """
         Выполняет вычисления для всех формул и обновляет данные.

        Этот метод проходит по всем формулам и использует входные данные для расчётов.
        Он обновляет значения данных с учётом результатов вычислений.

        Возвращает:
            dict: Обновлённые данные с результатами вычислений.
        """
        for result_key, formula in self.formulas.items():
            formula.evaluate(self.data, result_key)
        for key, value in self.data.items():
            print(f"{key}: {value}")
        return self.data